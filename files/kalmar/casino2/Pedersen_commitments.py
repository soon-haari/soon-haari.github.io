
from Crypto.Util.number import getStrongPrime
from Crypto.Random.random import randint

## Implementation of Pedersen Commitment Scheme
## Computationally binding, information theoreticly hiding

# Generate public key for Pedersen Commitments
def gen():
    '''
    q = 152959381732251042440150669608088104707319264528835225536023457713159692406754875606792299829201278099745917343709344086447797762023071492848617076421066318518588256541080167977242095563766851300196470555359052211827016020640654059068671250285737131146386906198787385801393786758648312312809360066685885642369
    h = 8981664260859906154464693553284209579401293330744766990664387230283785812436460247477604742676535526462430070315212796586397923747908947410605698824885211798120735825252147875418115904725051979017582521313308408204399935705108855528030851805724655562967222069880404148310524878207980782390923555001080246155
    g = 64361080661687613584038757472076659585946593826135071399091216189966119646735869953428318375082773967880366826994032257005370943365116503653049184284558751815316860759297233085182572820528486274643192409865422719838935791401898953000293064148564432969376396537867858402370211577097170487408681263627903830231

    return q, g, h
    '''
    q = getStrongPrime(1024)
    g = randint(1,q-1)
    s = randint(1,q-1)
    h = pow(g,s,q)

    return q,g,h

# Create Pedersen Commitment to message x
def commit(pk, m):
    q, g, h = pk
    r = randint(1,q-1)

    comm = pow(g,m,q) * pow(h,r,q)
    comm %= q

    return comm,r

# Verify Pedersen Commitment to message x, with randomness r
def verify(param, c, r, x):
    q, g, h = param
    if not (x > 1 and x < q):
        return False
    return c == (pow(g,x,q) * pow(h,r,q)) % q