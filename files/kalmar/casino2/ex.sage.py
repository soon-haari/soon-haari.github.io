

# This file was *autogenerated* from the file ex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_100000000 = Integer(100000000); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6); _sage_const_250 = Integer(250); _sage_const_7 = Integer(7)
from pwn import *

from Pedersen_commitments import gen, commit, verify

from sage.rings.factorint import factor_trial_division

from tqdm import trange

while True:
	# io = process(["python3", "casino.py"])
	io = remote("casino-2.chal-kalmarc.tf", "13337")

	io.recvuntil(b"q = ")
	q = int(io.recvline())
	io.recvuntil(b"g = ")
	g = int(io.recvline())
	io.recvuntil(b"h = ")
	h = int(io.recvline())

	order = factor_trial_division(q - _sage_const_1 , _sage_const_100000000 )
	tot = q - _sage_const_1 
	Fq = GF(q)
	h = Fq(h)
	g = Fq(g)
	lar = order[-_sage_const_1 ][_sage_const_0 ]

	h_ord = (q - _sage_const_1 ) // lar
	g_ord = (q - _sage_const_1 ) // lar

	# print(h_ord)

	for base, exp in order[:-_sage_const_1 ]:
		for i in range(exp):
			ex = tot // base**i

			if h**ex != _sage_const_1 :
				break
			else:
				m = i

		h_ord //= base**m



	for base, exp in order[:-_sage_const_1 ]:
		for i in range(exp):
			ex = tot // base**i

			if g**ex != _sage_const_1 :
				break
			else:
				m = i

		g_ord //= base**m
	assert h**(h_ord * lar) == _sage_const_1 
	assert g**(g_ord * lar) == _sage_const_1 

	diff = (q - _sage_const_1 ) // (g_ord * lar)

	print(h_ord)
	print(g_ord)
	print(diff)

	if g_ord // gcd(h_ord, g_ord) >= _sage_const_6  and diff > _sage_const_1 :
		break

	io.close()


io.sendline(b"d")

for _ in trange(_sage_const_250 ):
	io.recvuntil(b"Commitment: ")
	com = Fq(int(io.recvline()))

	com = com**(h_ord * lar)
	hh = h**(h_ord * lar)
	gg = g**(h_ord * lar)

	assert hh == _sage_const_1 
	assert gg != _sage_const_1 

	realgord = g_ord // gcd(h_ord, g_ord)

	assert gg**realgord == _sage_const_1 
	assert realgord >= _sage_const_6 

	print(realgord)

	for i in range(_sage_const_1 , realgord):
		assert gg**i != _sage_const_1 

	for i in range(_sage_const_1 , _sage_const_7 ):
		if gg**i == com:
			break
	else:
		print("fucked")
		exit()
	ans = i
	# print(f"ans = {ans}")
	io.sendline("y")
	ans = ans + lar * g_ord
	# print(ans)
	# print(q)

	assert _sage_const_1  < ans < q

	
	io.sendline(str(ans).encode())
























io.interactive()

