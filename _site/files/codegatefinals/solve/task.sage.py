

# This file was *autogenerated* from the file task.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1800 = Integer(1800); _sage_const_8 = Integer(8); _sage_const_24 = Integer(24); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_32 = Integer(32); _sage_const_2411 = Integer(2411); _sage_const_83 = Integer(83); _sage_const_8501 = Integer(8501); _sage_const_2125 = Integer(2125)#!/usr/bin/sage
import random
import hashlib
import os
import signal 

signal.alarm(_sage_const_1800 )

def PoW():
    prefix = os.urandom(_sage_const_8 )
    print(prefix.hex())
    answer = bytes.fromhex(input().strip())
    assert len(answer) == _sage_const_24 
    result = hashlib.sha256(prefix + answer).digest()
    assert result[:_sage_const_3 ] == b"\x00\x00\x00"

P = PolynomialRing(ZZ, 'x')
x = P.gen()

def convolution(n, f, g):
    return (f * g) % (x ** n - _sage_const_1 )

def balance_mod(f, q):
    tt = f.coefficients(sparse = False)
    ret = _sage_const_0 
    for i in range(len(tt)):
        cc = int((tt[i] + q // _sage_const_2 ) % q) - q // _sage_const_2 
        ret += cc * (x ** i)
    return ret

def random_poly(n, v1, v2):
    ret = v1 * [_sage_const_1 ] + v2 * [-_sage_const_1 ] + (n - v1 - v2) * [_sage_const_0 ]
    random.shuffle(ret)
    return P(ret)

def invert_prime(n, f, p):
    T = P.change_ring(GF(p)).quotient(x ** n - _sage_const_1 )
    ret = P(lift(_sage_const_1  / T(f)))

    # print(ret)
    return balance_mod(ret, _sage_const_3 )

def pad(n, arr):
    while len(arr) < n:
        arr.append(_sage_const_0 )
    return arr

def encode(n, arr):
    res = _sage_const_0 
    for i in range(n):
        assert -_sage_const_1  <= arr[i] <= _sage_const_1 
        res += (arr[i] + _sage_const_1 ) * (_sage_const_3  ** i)
    return res 

def task1(n, D):
    random.seed(int.from_bytes(os.urandom(_sage_const_32 ), "big"))
    f = random_poly(n, n // _sage_const_3  + _sage_const_1 , n // _sage_const_3 )

    f3 = invert_prime(n, f, _sage_const_3 )

    # print(f3 * f)
    T = P.change_ring(GF(_sage_const_3 )).quotient(x ** n - _sage_const_1 )
    assert T(f3 * f) == _sage_const_1 

    random.seed(int.from_bytes(os.urandom(_sage_const_32 ), "big"))
    sel1 = random.sample(range(n), D)
    random.seed(int.from_bytes(os.urandom(_sage_const_32 ), "big"))
    sel2 = random.sample(range(n), D)

    coef_original = pad(n, f.coefficients(sparse = False))
    coef_inverse = pad(n, f3.coefficients(sparse = False))

    print(encode(n, coef_original))
    print(encode(n, coef_inverse))

    for i in range(D):
        coef_original[sel1[i]] = _sage_const_0 
        coef_inverse[sel2[i]] = _sage_const_0 
    
    print(sel1)
    print(sel2)
    print(encode(n, coef_original))
    print(encode(n, coef_inverse))

    assert int(input()) == encode(n, pad(n, f.coefficients(sparse = False)))
    assert int(input()) == encode(n, pad(n, f3.coefficients(sparse = False)))

def task2(n, D):
    random.seed(int.from_bytes(os.urandom(_sage_const_32 ), "big"))
    f = random_poly(n, n // _sage_const_3  + _sage_const_1 , n // _sage_const_3 )
    f3 = invert_prime(n, f, _sage_const_3 )

    T = P.change_ring(GF(_sage_const_3 )).quotient(x ** n - _sage_const_1 )
    assert T(f3 * f) == _sage_const_1 
    
    seed = int(input())
    random.seed(seed)

    sel1 = random.sample(range(n), D)
    sel2 = random.sample(range(n), D)

    coef_original = pad(n, f.coefficients(sparse = False))
    coef_inverse = pad(n, f3.coefficients(sparse = False))

    for i in range(D):
        coef_original[sel1[i]] = _sage_const_0 
        coef_inverse[sel2[i]] = _sage_const_0 
    
    print(sel1)
    print(sel2)
    print(encode(n, coef_original))
    print(encode(n, coef_inverse))

    assert int(input()) == encode(n, pad(n, f.coefficients(sparse = False)))
    assert int(input()) == encode(n, pad(n, f3.coefficients(sparse = False)))

# PoW()
for _ in range(_sage_const_8 ):
    task1(_sage_const_2411 , _sage_const_83 )

for _ in range(_sage_const_8 ):
    task2(_sage_const_8501 , _sage_const_2125 )

flag = open("flag.txt", "r").read()
print(flag)

