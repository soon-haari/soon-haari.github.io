from tqdm import trange, tqdm
from Crypto.Util.number import *

data = [3938419846976491177353386476959871391250276, 1572716287169150086052693644874065905022794, 4594418998802084424029292030540164501647914, 1930038914885964131019353558113767928988524, 3514939407785176537983974600515665412537016, 2516014759104590425589755861298653531123156, 2006115840073966109328161152973488694097949, 2536789357786796863178704250638522440370741, 222382537015561455027037427337529427144802, 1753629602276394794914080156030327402152401, 37416187187825794053180362117840945057009, 4862851484589661471592630822402665005451082, 3155602221900915133581338912610189451839592, 1393680708791618672509384580878931923058271, 4942044973955441641565818652999589558725708, 5459568833173874883818639608078989205307599, 2166642615000736073418053234768441880598850, 5257579246670011822405396780476388990538774, 4007163143782322365870051403397199681818745, 3190167866407691523303066899296997522404311, 2198438055555033046209893535810698816457021, 5352558319052616467284131762734639043920111, 2516050734977731376270827671668857734164463, 4537169230782484513822640205952086758170657, 2570000725388415366152694514218880786609329, 2180277148609953001616441261168111309245620, 916068816908383055121673482892195945468015, 2917635956513410074209714837554619549661317, 998387085046598422770562657013463768471473, 3752651288979721368482033675927859262877722, 3125158714361508024357184535780962845259982, 2789670799023916362973443813433672941769739, 3266487778244962683644311553130093444933745, 3586733583842756091905714191538837788449895, 3486539426491420385216476042781733016213657, 4441308269874250145993193570488628740178503, 1713116549682265273437937282944408473813004, 4856201095831651849911951806931319651999707, 5059620411728270839208405645716230670963177, 2590130915717009603102691725425379702471674, 2514352450680278428251736217963463685662646, 4479713449288593110222583775733137583428694, 3577911272097612824559672258722731985314616, 1916927150451617913971457859814759011326300, 4026040093232229070470736485808676651634900, 1168120135431792231736413698705065764083594, 144955414813685553803817755589987956423183, 536647099928990308498280984934250202931955, 5366188209466345565504265340329395886401422, 4776652780831765899616727024389362386489850, 2202977226474888573376825479483433266461097, 5349111657118655430285965983663875269002149, 1484115535849052065251260149660431015382914, 3977524119502530501366795530403281191575709, 751988424639653573931676423531254246968629, 4854466475506696926324685033035143207804691, 3708300021672189502089964717028357342759656, 5317769199092808883091868081798657784088728, 3691456701100954065479203164130993982981922, 1139020851784394510217695331904627371364457, 1908192850294829881672426871324910495909241, 4208258250805733754134514403869948901699400, 1802438063125898746602394380507414264225271, 4330327024598434225016428942949532351400647, 2365726899891235075868959617874317382640886, 3090455176011219576109674749624416074111767, 4872440846203925012194305530605071110276828, 4352307410281094331057363594272233759115547, 2280231823036209472055503038163788130942461, 2014672737293187756342218582189273365058387, 1744818453831862047170906317488615241406154, 3007890268842282976979158462145864869532650, 2409267834834393416218319566199057824026741, 3569749140964208704882581497828696295028291, 2158965102129886421263498408710833005158520, 1360967044791050659936773309780809323574891, 3723501398637598900296404453829073201171637, 3491236682491954335683443066454914247393290, 1461185144823873122215764081405401189735681, 2131628180224173399752919782564004176895433, 4447028907997690235105091959169150204726960, 3222979015968768238783393864375397808604578, 384354905673156901738579250167703245142109, 231962954195771035470425874789689243628306, 5123757604814941379438878446761261196633334, 5258566740157537759688063748988077881910387, 213417118075594020103733163093202299302387, 3138163090831396272463333468310398520385450, 2579701135709306369696290796882161941294862, 1194388263011202752548907806797854226134394, 3820382547858641209909968748030490140280576, 1694275928125892045394665978756966602760310, 331594048573254345991801444476381895811750, 2994126106648709943717124521188366916906544, 4070266950324698168343459001765874964580809, 4102994962213716249449424453440555436618616, 2334315472345244335891712603556296251494747, 670712078537912375889727641010169485940037, 3487574496145638182482720500525743044995952, 424874009395066484748794426635342713828124, 4309595067017960909499622849036259470327988, 4354860085510749907857385685031302427067022, 1776291757494036433448243610113111953457804, 3985317881227692895652067050987754807747422, 2058159922441141354297457153007302682184768, 136754153539361243096462230794435768170868, 2900719930810498461601663746627756813521063, 3117811050658014180789626547682361584508077, 5382402412489601143898936676635586220043320, 3010276686437854005442683704315743068474776, 1861800397023532664459882598745088562312572, 594972426642223708236649166938775842738428, 334730043257359181526429662343813331090275, 385472261896338103201547256682788267011804, 3095795173424810299346293140418231621685441, 829976966172936712735562595424042498971621, 2569004856799419765319660173760965627793614, 4164577465928448180607259960578191024069211, 3837658879499560855655231858971882935647649, 3884228339602292858785533734709347745906056, 821169153608323576705269172831356279851221, 3039414768190202166412709904671186474951265, 604401277907295251754054888055572276249784, 5249450795822688633134028550204523741420377, 2353449850938640207616128381114798442801464, 4469417979814627974664793489393305792387830, 1209447289166336503503558817833506737830020, 4750779229170748139763729955753270479920872, 4247973373159499022410546247366380086454328, 5265393621140834365481068153958883102375051, 3443460317226340922770966158335706276701413, 4408080534918227320839102323067209252632001, 418236829445710853953716748575435102199633, 2227553273314514248315972254658454864805494, 3234566545309163810140603507970499565820422, 4360470406091614596563447861417366209124320, 95255394590160234136963105564812246866568, 3847282790720919069222962319115700375786646, 3438984596263343415491328538620807500413229, 107912539819806700514990880815359453925740, 1921482452596136914263117307624711560720215, 641894520008625967805592142622404256078512, 2142099560039357943804128108296758159003517, 561716286517264600940469693316604893586310, 1649515035610872523514286009675342226464276, 1878916305737200422969921839035152960159625, 5094775467584560283261877899337958729927290, 770239458185517129565384608025187792004316, 181546827546271674636227863546480924569235, 4585090691531712429478637607179265894081037, 4645939303080539541285602870214053515366776, 2847582400547476907344484039694263637137999, 4689962958687803441160509225309291785826802, 2421597921745894068507837599134416597697121, 3882191706420368128051592562248383568679416, 428536106756297065943672490251523286058703, 2172950034416129155458803147943073907237397, 3350580671264454238642690811127538714476526, 206925735109503961447185536153146527974189, 4229737691988013385617649190557927768858912, 3653952179499501254062195837700123349977770, 2898347107178161511475087631571844801394051, 2506449025471247990172385254137493409776897, 309394161478637951100184480252970840192251, 3882631601191251032928767954529102241387182, 2036272760359232057859150442516570405960766, 623231432783130954004114257454678424500392, 2424438221377442034113899433465315138323703, 3154397090836917704054731216302952714248458, 2217277445649715124124738395347371312762173, 2674851269819570775772214980679524957577315, 1312493125013858034773791656751833328444328, 221634984510469800157504592882493466400344, 4996319489449590491141416164860909411061882, 2987669349273232033434741112609646632214320, 3857706842637669916727658775650575314731044, 4669755244440600158885848987374761109365782, 4102806065673039505680766095683162870061615, 4719752813276147877733754749954622804192399, 1539711483488098231917218301820289590695752, 589954370116343457509237162219296290624203, 3227330392267766248569494172309497479856920, 5318426905736869017612605529122473378774707, 3390045627866324752188812683644140995522593, 65217546024172841836542620769300254549163, 3748611669431230681923237542058080749687971, 825975982530334049484201247459458183534965, 4529309506429116978931151369314331736291957, 2097539233215050893769523855866643885188889, 930782754522066543609305414167861976319535, 1037110497950562114965848909520833923591489, 102868960471874241257721901558233501094653, 2473324202265100836776082417619785217585518, 2382419362456897095005668912910185329950960, 5485552240768918693098965466140241380959212, 4830297897930922135966623430160831313699366, 2099434561586636709855960834922557868658269, 3928872060057674450105815745056106757334265, 4740112557134434444335922001990476978658876, 5314568577823894601118902307205218528864835, 2787049679782376837420166007596555362756151, 1229200655540355359947103820589113625680976, 408274671049323163869232644394739830034642, 541065633667264805306689592683929109388891, 3905114778840594584775555298897476697815300, 2783813980003458019441256996180933477496905, 4542862141348997658492933763822243842845322, 846260462176924994696178043187985221547005, 5543267267706578604415104759669905232770878, 3213905027561951676057475880819829682872923, 1475609053540092369558962865158152887967093, 2674083014002008524488153520296761328222534, 1675158511933401510484454003645663314296556, 2122414842117790454098007096749807241584620, 3587432355504419421382879603043853752492478, 3694191351300934527362820635771762134837169, 3191735616309629234155818843053077774896132, 5091362559194881408752706089994607059444515, 2828562989156112340947427108077784976119925, 89197379538647561719492666113140308241313, 2001530237391097672957356888173101841945321, 4401713992106437212108048576259017336236507, 1543558034258842257126800820507283379896359, 4921297846250220476093002768706090372806230, 1724886071946233209243444280823775515541648, 3136652609411612172036765460999025256762610, 588787914809590909552231771873780210843811, 3995712513762608511551228875588195463724706, 5535414088614289259704557788942701152371599, 894589260184868049425547770508713547860454, 340117045439482103923943170027305543224192, 1666414006660112019368855675304730583078594, 3241727639718873655909445599099889434431516, 5555122500498032832977916472080517170095039, 1714388207210824118361713025911914377873614, 1036035045025440185503412574821985353290945, 1171824890761476645864381410893627697932124, 5107253476612888742647301326049412885486000, 3880590594767563248333132515471705020836625, 143663276334948644617716781887589383136906, 2495916283451620150646880731016023264698244, 3640623602621350478452646661256982106266115, 5311965955438416010956363426306544088122258, 2999849812392287753152086915293502599113582, 924761627867113876333152114481628050780663, 4877226267955792305067531719018801253565331, 4508488185785812370722269363928837772046400, 2083406701404223654072239751262623860726029, 961246188599633033880489922322363290192167, 64914152285589145787367378975611458202244, 3938871976463708771155490748845291311923079, 4567372398083038907133365156714788777965013, 410372946344593391509562543878628598471831, 367383382833667888930083696853480766207846, 351566619198729425479317833766926874693212, 2815613552893932348824065325879599528766607, 1036756444905921313019140049109759162491318, 245070958273871042511470980706162237208833, 3491468194023147939887808071835043264824671, 442938272651876440673942750687170196102397, 4539120390262581582803155791609383050567929, 455813044856688061542650003692503066115570, 4437813494659701599988810381663533278547314, 225184895894973651103152331252110740896533, 3773323924398609709209733791106002463555286, 1858042858404501599905805682713755722764796, 244488878960445344067846261193624791011206, 2298900277154957976192493465296430002793003, 3042718857660388248058653220749702067970040, 1881032660460139256614463964946028810343486, 3136273046429565284352359454701284897048638, 2713590612156733181412451776164718697940798, 51497125199699086200227043992834585702815, 2297372439848889581975458064372122675850592, 2123579102858304757425630330260195021259011, 5380884817103356548052366407087051351801710, 4325753080654668018571560959758961275542146, 2735065410449697400931798834469623693521510, 2450833952319828626091379924935266440138229, 4891764302670069763103074110825244712181220, 4299769292426036343258361152777840786493991, 3825509788633420883839117754497817982379655, 1185956199548328981938062990218439781389269, 3210138961694956056502427206691265312999377, 405121431696694052193460217471631805484540, 4453496937759091403499121487075959442068822, 3531291592188427366537677158004687902758438, 3109594292718702786533672495892575269660284, 4053096416889274223643366074519434647981616, 3281699727019511069945150741374392172087712, 5571756849282714280461177356032170596670752, 3936622078987457492148599433760702506400113, 1815529962022003867446013323432393100907654, 2888173977611360505633514346782575742507123, 2027818801481580528471887649761087633558734, 2551170362886553297298022900331144003915692, 1415723645380817966523374113998145511577019, 3991335322133564041437145164013930017849178, 587853781440885271213471890763361911325042, 1574816370229200685386451162834531136051917, 1181562297053199788370220416074617042107170, 4746037174632773208170305480026433801656333, 1115163703769576117452474538786797138961122, 4881587847685290937174224838655597367254042, 2787982952169900524198924981181966315079918, 352402274847525156699361405155413850492104, 3276035890485727559918672695016943646927215, 1017843784901075038877539300565593089596220, 2202732732094764209860469557423505517414145, 1108405935947193515257620926858472541961948, 3875095494021320607930679100206943986454921, 4426653338083834730071637635590382289774929, 5008911096080497141288709858745514408855267, 893042276195327746465651739409621142068924, 2662442718972772676619938393234173815014633, 1116657001625953628454838184139566951153236, 3670648320271793913507411809031444837712360, 1389802178202044411519432666731080389744199, 5163398678037552057767319074210336783579319, 3779970458855988118981167399890872311901742, 128665309016483883633571384020790648443562, 2160553537106496912813395861174006723349519, 1450257386038053552742748415689277817261500, 934768574608770864586432471257240170769571, 2664480761602652343880245870685303976509183, 3531612698994722752813815007565866544548327, 811358450258593552030658631837386247881127, 3655357359314859664842174142264470334772294, 4622557024615758055395387970109670348574079, 2593589042468378014710544924599049857024984, 4052563292914995663668340594360780573039499, 2060018734001270858408315790302454979461667, 408762027790916665441192367100940565253294, 2970194189118637955603012623093163005476771, 3166284982614930903831031280582462372187553, 3859288739030031849424053824138474268082362, 3762253023208449499789557706976448122408000, 3148130712077520066820515094526393245269419, 4814592780314852533650416004699010131580895, 738334508730719748301989417718001379311514, 3165446097533761013601954169296358051174950, 1091812194268037056922344656234529335909754, 4242097974128157055138352933841196517625619, 3981239216158173287617180650761072997829356, 343878306949196845319675166823496878936216, 1471735030863634354370247961483587129579610, 1829668721958562325100308390797939687852541, 2108279020034971489429708027761321162928916, 5095030190219400035997002507371359455990261, 834978053202331481585714673094590912738382, 4355922119191523545733558428480311279448284, 1302889392971412857254419329577409956502706, 5446834034140273165365407417729817377752933, 5245023593442605932462537646711705631297094, 5417248083765627852925056890699725363557315, 5420477928595612932090694720112266918864339, 1349438704915395595668002625245390901313948, 4507783238088344622232867318057008296811047, 655824347500469416622775579751219718383181, 5552716750334027903873575575639435339019368, 5303508132415604915275460288335697992216095, 2118855579394440267422260271050400788893715, 2428682631245355563010464591185206612057428, 1799038026012926706260982182091674217525752, 1973695284664646660108534858802772360131769, 228974602595354885228960809202095868575291, 347237732620739410814194607691454611573606, 5187324187818848376575121978342411621690482, 1788071898682374070056067337917796393283359, 4203741973651314427932660415622332641619700, 1201729396444699823785573760316616340908643, 2241894846091164550641542902087908924906633, 3211497258212339368116857053818148636156037, 1975059443413448340055894626491277175744778, 2733324636502502532708341940048303912339395, 2940793509551892246124912217835754653786588, 4336230285204605473649754696463408362574695, 987537799244195727368376257641060996337196, 4047219812826387865787261217227072857882328, 4865963219821155510464977437910559760947686, 844750946311132030686601725522090339117364, 3124308123892352810415028252816195342159186, 3025441431698912655170503498101250582227507, 2299565627098541167191260536281506424546417, 1516653100466184690750373684188071269722472, 1400984952101572468853309241948413222237337, 3977792178073689734168172456987819855518561, 703805170866792836354036068980100820993107, 2961084714990452476546379642243965938981788, 5067515985774770516224785784782885233638217, 467924873938676962118646832009475539643872, 4102334288775139539668182675498829351613357, 4026674008707151927557699085149002293417935, 3463504630713818457945284187360771439177169, 4825504743130420600966401349546187467531185, 2919308379072757496266020350588920163883452, 4902143495848166971535216935263561037707145, 1573213344344959998236799843867129125199549, 3914003959946631294268691092739546672853797, 2936450422737680953616534143312789294154969, 170848574275247867876212876647121306606742, 1991831281470377416702685984425462359594588, 5128600799875821548788258126834421472240719, 4327825961047293886203070789230763653630716, 1945584038364619764418814880837756493870106, 399318218831946869980185851544312636219894, 1121723868102528972506961840777545022047893, 1586441464155540517778334679617156300464328, 3211002724404782183029322489820013599593722, 1805794311810097879301785857189424631416410, 4797316227037298019544798755241949936985680, 5324148348857916666279209011392779925603562, 3792645872573385875677113271646164310180319, 330203226928426487277548771081927688490576, 1107250850947443775145706449854364487464796, 106300505154687870037965910468316688645723, 2784313642639419976289188699383327542966829, 1366312348094205766866530809567058711623499, 3277672847922000287724400783245430087789911, 3849907069417125410863771159458312428690171, 1948844356233001327737479063918241073300477, 1074608548905669556388894347572638292178762, 447569661850617720587988433886489169758724, 4670826968074129659963370973860934068545947, 3359763583325135526416223191433327239098039, 1576825999154604079340222566973595034147149, 1756229251549171349969056528657369022216981, 3010774582572883923919880208049795074900939, 1970250441360874724489368179345882743845783, 1122307624968888787194923309057696302508442, 3662201759982532011889413606436223770325955, 4750735375447648220894761856017306841475869, 3450331673395436719720502697674609116894175, 4972840368866868128285606162732559247683619, 5219628033030491640031500267128263476281208, 2226874385876094690110964726659734060216232, 3882028300683465344480095739315798533005722, 5130131738134165067180302392695773958027740, 2429624382174843223539431434249004555405540, 22225354749107931411790699924112913867753, 4890601726400637967170525838225734392042219, 4286888611447752234219328596111083839975026, 2195477042328448041456938811405742527850385, 3381529496355062799797243843503595683383379, 2467175921918009899331027424775681925547686, 5064993930677352826228369425414554429561372, 1841858400164183772607184135443225454098319, 5281434460607897160134574836822519120978194, 1830938866811535159621490474645922178257109, 1344121505779920046250868122409055001125282, 2378937682538332472881624175597647913127046, 2834946125823702782705419134799198933965143, 2330280595231081143906988117859864340845534, 630028274072844633794006339924850188681104, 1963320731442896080124076860668726910209502, 5280751497555512131515187804669377151521088, 3744491496769474106876318453401443177943882, 2053598052679876157220698205102656099148923, 3534875758242945145858040905130175289043944, 1958744544078228107026955046753927947522293, 2780541550953669174224659543229390541125406, 3221907349054545873804070378076040156593325, 3145736038127252825928380186524560898961025, 2184968380559719789317173945180337026635050, 4892146133412915959755047784392105349774323, 1038450367655871740874713666032478909494907, 175082688911399360742041636589184707815714, 3384169591600834691299284790851135348109584, 3990201046419089057575529288760899057143155, 2176382433801406689063328481727596396923728, 3943821528475848306315740157663807737535179, 4437799830117988550641755099645009860891922, 1601744022127224381092622640322135853211924, 2461671216714396075362158400591829278461816, 646485341778029670082300883755085742372078, 1481415786535435558776794992414113420590788, 2705633755376648206951527662224396954251336, 3737792939865180981954770863793482226724061, 4368699485217754103706861907668749346960402, 5559935544074436321035257944405826065633100, 388506144426213083707473638879239053526379, 2638913988435126527115010866721528106255730, 4611083767434378448855778192306791911674461, 4629727461762229246156699044181987478014549, 5079930490316629584896616837679753569826810, 5040398320688562614384090730798789078419082, 342722484701268625153747925415228513967616, 4221386897770706123918815638701535046138251, 5450663998627223481051838828017923609727424, 947685537310683523934466477339329289801564, 619302402738321278914820426419282682690986, 4604758134449572526831215503165954862843546, 2948448228444295088444490104222261155698781, 3100074653537862457082485262965638704172981, 2287494485645031188644936840002460401823728, 4389762592250569104475371202393234344213222, 3343394468330179634023246474928109040078416, 3348616054474908833050218600184559828872413, 2011193457781867593307308508695316250667718, 644082098542529088290239024585910512264303]
enc_flag = bytes.fromhex("bf7d4897735f758539188cf654e6003ce5ebff7cbfd3ba766b653366435e53e73013713fae33cfc240e04d6a8122db42c3dd29a13d68b9c4ae7f314664f43703")

assert len(data) == 500

p = 2^142 - 111
GFp = GF(2^142 - 111)

v = (75853883610309597642200581281276453016977, 1745562577606966607253524044048143558142159, 181011708984481667134618751284175877065619, 1999883472062291941283418290583444118345704, 2792544425294148730479016737745301114797796, 3966903051518311148411723330763745375113485, 180532832883548080254525337654754975225858, 2773271531764267593444941592907531053466699, 1451051553179938648556768593153582677729653, 1595625270138490704772240388945578495813709, 2224428845366990238698980629341407895404976, 3480854053240689974557064559932001742782324, 5467040765296159379606326852642622411333184, 2305157618585523712018433373753735979651355, 5108869962924621620409552388746750882406555, 3076499181735175919588917893167268916357811, 2249212086184589245648565913345298913829791, 5154037337118010965643024841702209764002711, 3727926321294969358426583802534662021309030, 2499633494185931196982831794661758600052741)
assert len(v) == 20

def inner_prod(a, b):
	assert len(a) == len(b)
	ans = 0
	for i in range(len(a)):
		ans += a[i] * b[i]
	return GFp(ans)

for i in range(500 - 20):
	assert inner_prod(v, data[i:i + 20]) == GFp(data[i + 20])

mul_mat = [0] * 20
mul_mat[19] = v[:]
for i in range(19):
	mul_mat[i] = [0] * (i + 1) + [1] + [0] * (18 - i)
mul_mat = Matrix(GFp, mul_mat)

for i in range(500 - 20):
	assert mul_mat * vector(GFp, data[i:i + 20]) == vector(GFp, data[i + 1:i + 21])

G = mul_mat

poly = G.charpoly()

R = poly.parent()
x = R.gen()

rows = []
X = []
Y = []

base = vector(GFp, [0] * 19 + [1])
for e in range(200):
    vx = G**e * base
    vy = list(pow(x, e, poly))
    vy += [0] * (20 - len(vy))
    rows.append(list(vy) + list(vx))
    X.append(vx)
    Y.append(vy)
X = matrix(GFp, X).transpose()
Y = matrix(GFp, Y).transpose()
T = X.solve_left(Y)
assert T * X == Y

import random

k = random.randrange(0, 2^141)

assert R(list(T * G**k * base)) == pow(x, k, poly)

import numpy as np

iv = vector(GFp, [GFp(int(10000*np.sin(n))) for n in range(20)])

ansv = vector(GFp, data[:20])

jmp = 20

iv_mat = Matrix(GFp, 20, 20)
ansv_mat = Matrix(GFp, 20, 20)

for i in range(20):
	a = mul_mat^(jmp * i) * iv
	b = vector(GFp, data[jmp * i:jmp * i + 20])

	for j in range(20):
		iv_mat[j, i] = a[j]
		ansv_mat[j, i] = b[j]

assert iv_mat.determinant() != 0

Gmul = ansv_mat * iv_mat.inverse()

Gmul_poly = R(list(T * Gmul * base))

quots = list(factor(poly))

# print(quots)
assert len(quots) == 4
assert quots[2][1] == 3

assert pow(x, p^2 - 1, quots[0][0]) == 1
assert pow(x, p^2 - 1, quots[1][0]) == 1
assert pow(x, p^9 - p^6, quots[2][0]^3) == 1
assert pow(x, p^7 - 1, quots[3][0]) == 1

tot_order = (p - 1) * (p + 1) * (p^2 + p + 1) * ((p^7 - 1) // (p - 1)) * p^6
assert pow(x, tot_order, poly) == 1

# around p^16

'''
 2^4 * 3 * 1406497 * 830370383 * 99450617953977436093324829
 2 * 47 * 419 * 295304255299792439 * 479344559531469642011
 3 * 13 * 643 * 1249 * 992386277347009485714707763632489195288991166092726269322685606550811642377191
 888721 * 10936843 * 3089576018886783752286281867829807162468451995686237746046563887239265439394982331020740657910136015829313099377652716869295781827170440567834347088967038548532445613457872424396895321913269834765189073777783313300388539209930677803861706255381
'''

'''
99450617953977436093324829
295304255299792439 * 479344559531469642011
992386277347009485714707763632489195288991166092726269322685606550811642377191
3089576018886783752286281867829807162468451995686237746046563887239265439394982331020740657910136015829313099377652716869295781827170440567834347088967038548532445613457872424396895321913269834765189073777783313300388539209930677803861706255381
'''


small_factors = 2^5 * 3^2 * 13 * 47 * 419 * 643 * 1249 * 888721 * 1406497 * 10936843 * 830370383

assert tot_order % small_factors == 0

largos = tot_order // small_factors

xbase = pow(x, largos, poly)

assert pow(x, tot_order, poly) == 1
assert pow(xbase, small_factors, poly) == 1

fcts = [2, 3, 47, 419, 888721, 1406497, 10936843, 830370383]

realorder = small_factors // 13 // 643 // 1249

# print(realorder)

for fct in fcts:
	assert isPrime(fct)
	assert realorder % fct == 0
	if pow(xbase, small_factors // fct, poly) == 1:
		print(f"{fct}, nope")
		exit()
	else:
		pass

assert pow(xbase, realorder, poly) == 1
assert pow(x, realorder * largos, poly) == 1

fcts = [2^5, 3^2, 47, 419, 888721, 1406497, 10936843, 830370383]
assert prod(fcts) == realorder

mod = []
rem = []

def my_dlog(xbase, ybase, order):
	assert pow(xbase, order, poly) == 1 and pow(ybase, order, poly) == 1
	assert isPrime(order)
	step = round(order.sqrt()) + 1
	assert step^2 > order

	xstep = pow(xbase, step, poly)

	xs = []
	st = 1
	for i in range(step):
		xs.append(st)
		st *= xstep
		st %= poly

	ys = []
	st = ybase
	for i in range(step):
		ys.append(st)
		st *= xbase
		st %= poly
	ys_set = set(ys)



	for xtmp in xs:
		if xtmp in ys_set:
			col = xtmp

	for i in range(step):
		if xs[i] == col:
			xidx = i
			break
	for i in range(step):
		if ys[i] == col:
			yidx = i
			break
	assert xs[xidx] == ys[yidx]

	dlog = (step * xidx - yidx) % order
	assert pow(xbase, dlog, poly) == ybase

	return dlog

ROUND = 2

if ROUND == 1:

	for fct in tqdm(fcts):
		base_pow = largos * realorder // fct
		xbase = pow(x, base_pow, poly)
		ybase = pow(Gmul_poly, base_pow, poly)

		assert xbase != 1 and ybase != 1
		assert pow(xbase, fct, poly) == 1 and pow(ybase, fct, poly) == 1

		if fct < 100:
			st = 1
			for i in range(fct):
				if st == ybase:
					dlog = i
					break
				st *= xbase
				st %= poly

			assert pow(xbase, dlog, poly) == ybase
			mod.append(fct)
			rem.append(dlog)

			continue

		mod.append(fct)
		rem.append(my_dlog(xbase, ybase, fct))
		
	# print(rem)
	# print(mod)

	dlog = crt(rem, mod)
	mod = prod(mod)

	assert pow(x, largos * dlog, poly) == pow(Gmul_poly, largos, poly)


	add = pow(x, mod, poly)
	st = pow(x, dlog, poly)

	print(mod)

	for i in trange(2^23):
		if st == Gmul_poly:
			ans = dlog + mod * i
			break
		st *= add
		st %= poly

	print(ans)
	assert pow(x, ans, poly) == Gmul_poly


if ROUND == 2:
	ans = 79120327624133200239720213852419346424887

	assert mul_mat^ans == Gmul




	COEFFS = [0] * 20

	F = GF(2^142 - 111)


	def g(n):
	    if n < 6:
	        return F(int(10000*np.sin(len(COEFFS) + n)))
	    return np.array([F(int(10000*np.log10(2 + i))) for i in range(6)]).dot([g(n - 6), h(n - 2), i(n - 3), g(n - 3), h(n - 4), i(n)]) + 2*n**3 + 42

	def h(n):
	    if n < 3:
	        return F(int(10000*np.sin(len(COEFFS) + 6 + n)))
	    return np.array([F(int(10000*np.log10(1337 + i))) for i in range(4)]).dot([h(n - 3), i(n - 1), g(n - 2), h(n - 1)]) + n

	def i(n):
	    if n < 3:
	        return F(int(10000*np.sin(len(COEFFS) + 9 + n)))
	    return np.array([F(int(10000*np.log10(31337 + i))) for i in range(5)]).dot([i(n - 2), g(n - 3), h(n - 3), h(n - 1), i(n - 1)]) + 1

	# g0 g1 g2 g3, h0 h1 h2 h3, i0 i1 i2 i3
	
	coef1 = [F(-1)] + [F(int(10000*np.log10(2 + i))) for i in range(6)]
	exp1 = [(0, 0), (0, -6), (1, -2), (2, -3), (0, -3), (1, -4), (2, 0)]
	tg1 = [42, 0, 0, 2]

	coef2 = [F(-1)] + [F(int(10000*np.log10(1337 + i))) for i in range(4)]
	exp2 = [(1, 0), (1, -3), (2, -1), (0, -2), (1, -1)]
	tg2 = [0, 1, 0, 0]

	coef3 = [F(-1)] + [F(int(10000*np.log10(31337 + i))) for i in range(5)]
	exp3 = [(2, 0), (2, -2), (0, -3), (1, -3), (1, -1), (2, -1)]
	tg3 = [1, 0, 0, 0]

	fcs = [[coef1, exp1, tg1], [coef2, exp2, tg2], [coef3, exp3, tg3]]

	mat = []
	res = []

	for fc in fcs:
		coef, exp, tg = fc
		assert len(coef) == len(exp)
		assert len(tg) == 4

		v0 = [F(0) for _ in range(12)]
		v1 = [F(0) for _ in range(12)]
		v2 = [F(0) for _ in range(12)]
		v3 = [F(0) for _ in range(12)]

		for j in range(len(coef)):
			mul = coef[j]
			func, prm = exp[j]

			v0[4 * func + 0] += mul * 1

			v0[4 * func + 1] += mul * prm
			v1[4 * func + 1] += mul * 1

			v0[4 * func + 2] += mul * prm^2
			v1[4 * func + 2] += mul * 2 * prm
			v2[4 * func + 2] += mul * 1

			v0[4 * func + 3] += mul * prm^3
			v1[4 * func + 3] += mul * 3 * prm^2
			v2[4 * func + 3] += mul * 3 * prm
			v3[4 * func + 3] += mul * 1


		mat.append(v0)
		mat.append(v1)
		mat.append(v2)
		mat.append(v3)
		res.append(tg[0])
		res.append(tg[1])
		res.append(tg[2])
		res.append(tg[3])


	mat = Matrix(F, mat)
	res = vector(F, res)

	x = mat.solve_right(res)




	import time

	st = time.time()


	init_cp = 8
	length = 1000

	glist = [g(k) for k in range(init_cp)]
	hlist = [h(k) for k in range(init_cp)]
	ilist = [i(k) for k in range(init_cp)]

	for n in trange(init_cp, length):
		ilist.append(np.array([F(int(10000*np.log10(31337 + i))) for i in range(5)]).dot([ilist[n - 2], glist[n - 3], hlist[n - 3], hlist[n - 1], ilist[n - 1]]) + 1)
		hlist.append(np.array([F(int(10000*np.log10(1337 + i))) for i in range(4)]).dot([hlist[n - 3], ilist[n - 1], glist[n - 2], hlist[n - 1]]) + n)
		glist.append(np.array([F(int(10000*np.log10(2 + i))) for i in range(6)]).dot([glist[n - 6], hlist[n - 2], ilist[n - 3], glist[n - 3], hlist[n - 4], ilist[n]]) + 2*n**3 + 42)

	# print(time.time() - st)

	# assert g(12) == glist[12]
	# assert h(12) == hlist[12]
	# assert i(12) == ilist[12]
	i12 = i(12)

	g_new = [glist[n] + (x[0] + n * x[1] + n^2 * x[2] + n^3 * x[3]) for n in range(length)]
	h_new = [hlist[n] + (x[4] + n * x[5] + n^2 * x[6] + n^3 * x[7]) for n in range(length)]
	i_new = [ilist[n] + (x[8] + n * x[9] + n^2 * x[10] + n^3 * x[11]) for n in range(length)]

	for n in trange(20, length):
		new_g = np.array([F(int(10000*np.log10(2 + i))) for i in range(6)]).dot([g_new[n - 6], h_new[n - 2], i_new[n - 3], g_new[n - 3], h_new[n - 4], i_new[n]])
		assert new_g == g_new[n]

		new_h = np.array([F(int(10000*np.log10(1337 + i))) for i in range(4)]).dot([h_new[n - 3], i_new[n - 1], g_new[n - 2], h_new[n - 1]])
		assert new_h == h_new[n]

		new_i = np.array([F(int(10000*np.log10(31337 + i))) for i in range(5)]).dot([i_new[n - 2], g_new[n - 3], h_new[n - 3], h_new[n - 1], i_new[n - 1]])
		assert new_i == i_new[n]


	mul_mat = Matrix(F, 18, 18)

	for i in range(5):
		mul_mat[i, i + 1] = 1
		mul_mat[6 + i, 7 + i] = 1
		mul_mat[12 + i, 13 + i] = 1

	# h
	for i in range(4):
		co, ex = coef2[1 + i], exp2[1 + i]

		mul_mat[11, 6 * (ex[0] + 1) + ex[1]] = co

	# i
	for i in range(5):
		co, ex = coef3[1 + i], exp3[1 + i]

		mul_mat[17, 6 * (ex[0] + 1) + ex[1]] = co
		mul_mat[5, 6 * (ex[0] + 1) + ex[1]] = co * coef1[6]

	# g
	for i in range(5):
		co, ex = coef1[1 + i], exp1[1 + i]

		mul_mat[5, 6 * (ex[0] + 1) + ex[1]] += co

	st_idx = length // 2

	assert mul_mat * vector(g_new[st_idx:st_idx + 6] + h_new[st_idx:st_idx + 6] + i_new[st_idx:st_idx + 6]) == vector(g_new[st_idx + 1:st_idx + 7] + h_new[st_idx + 1:st_idx + 7] + i_new[st_idx + 1:st_idx + 7])

	def myi(n):
		vec = mul_mat^n * vector(g_new[0:6] + h_new[0:6] + i_new[0:6])

		return list(vec)[12] - (x[8] + n * x[9] + n^2 * x[10] + n^3 * x[11]), vec

	assert myi(length // 2)[0] == ilist[length // 2]

	ians, it = myi(ans)

	S3 = []

	for k in range(1337):
		n = k + ans
		S3.append(it[12] - (x[8] + n * x[9] + n^2 * x[10] + n^3 * x[11]))
		it = mul_mat * it
	assert S3[0] == ians
	assert S3[1] == myi(ans + 1)[0]
	assert S3[700] == myi(ans + 700)[0]
	assert S3[1336] == myi(ans + 1336)[0]


	assert myi(12)[0] == i12


	print(f"S3: {S3[:2]}")


	# got S3, ans
	ITERS = ans
	S3, ITERS

	def j(n):
	    if n < 10^4:
	        return F(sum(S3[d] for d in ZZ(n).digits(1337)))
	    return np.array([F(int(10000*np.log(31337 + i))) for i in range(100)]).dot(list(map(j, n - 10^4 + 100 - np.arange(100))))

	mul = [F(int(10000*np.log(31337 + i))) for i in range(100)][::-1]
	# n - 9999 ~ n - 9900

	j_init = [j(k) for k in range(1, 10000)]
	
	'''
	j_list = [j(k) for k in range(0, 10000)]

	def j_hehe(n):
		return j_list[n]

	high_bound = 30000
	for n in trange(10000, high_bound):
		new_val = np.array([F(int(10000*np.log(31337 + i))) for i in range(100)]).dot(list(map(j_hehe, n - 10^4 + 100 - np.arange(100))))
		j_list.append(new_val)

	'''

	current = j_init[:]

	for i in range(1, 100):
		current.append(F(0))

		for jj in range(i):
			current[9999 - jj] += mul[jj] * current[0]
		current = current[1:]

	assert len(current) == 9999

	assert current[0] == j(100)

	R.<x> = F[]

	init_poly = R(current[::-1])

	assert list(init_poly)[9998] == j(100)

	mod_poly = x^9999
	for i in trange(100):
		mod_poly -= mul[i] * x^i



	# target = 29970
	target = ITERS

	to_pow = pow(x, target - 100, mod_poly)

	print("Pow Done.")

	ans_poly = (to_pow * init_poly) % mod_poly
	print("Mul Done.")

	ans = list(ans_poly)[9998]
	
	print(ans)
	# print(j_list[target])
	import hashlib
	from Crypto.Cipher import AES

	key = hashlib.sha256(str(ans).encode()).digest()
	cipher = AES.new(key, AES.MODE_ECB)

	flag = cipher.decrypt(enc_flag)

	print(flag)
    






